{"version":3,"file":"component-game-planar.js","sourceRoot":"","sources":["../../../../src/components/component-game-planar/component-game-planar.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component,  Method,  Prop,  h, Event } from '@stencil/core';\nimport { User } from '../../models/user';\nimport { MapManager } from './map-manager';\nimport * as PIXI from \"pixi.js\"\nimport { PlanartestLog } from '../../models/game-models/planartest-log';\nimport { Log } from '../../models/log';\nimport { ScoreCalculator } from '../../scoreCalculator';\nimport config from './config.json'\n\n@Component({\n  tag: 'component-game-planar',\n  styleUrl: 'component-game-planar.css',\n  shadow: false,\n})\nexport class ComponentGamePlanar {\n\n  @Prop() player_id: number;\n  @Prop() education? : string;\n  @Prop() sex? : number;\n  @Prop() birthYear? : number;\n  @Prop() region: number;\n  @Prop() customLang?: (\"hu\"|\"en\");\n  @Event() finish: any\n\n  user: User;\n  container: any;\n  app!: PIXI.Application;\n  loader = new PIXI.Loader;\n  dim: any;\n  public mapManager: MapManager;\n  specialLog = new PlanartestLog;\n  log: Log;\n  pauseDate: number;\n  started: boolean = false;\n\n  constructor(){\n    this.user = new User(this.region, this.player_id, this.sex, this.education, this.birthYear)\n\n  }\n\n  start(){\n\n    if(!this.started){\n      this.container = document.getElementById('game') as HTMLElement;\n      this.dim = {\n        w: this.container.offsetWidth,\n        h: this.container.offsetHeight\n      }\n\n    this.app = new PIXI.Application({\n\t\t\twidth: this.dim.w,\n\t\t\theight: this.dim.h,\n\t\t\tantialias: true,\n\t\t\ttransparent: false,\n\t\t\tresolution: 1,\n\t\t\tbackgroundColor: 0xffffff,\n\t\t});\n\n    this.container.appendChild(this.app.view);\n    }\n\n    if(this.started){\n      this.app.stage.removeChild(this.mapManager)\n      this.mapManager = null;\n    }\n    \n    \n    this.mapManager = new MapManager(this.dim, this.specialLog, this);\n\t\tthis.app.stage.addChild(this.mapManager);\n    this.log = new Log(\n      this.user,                    //user data (player_id, region, sex, education, birthYear)          \n      \"planartest\",                    //game_name\n      new Date().toISOString(),     //start_time\n      \"mobile\",                     //mobile\n      \"4.0\",                        //game_version\n      \"unknown\",                    //ui_agent\n      this.dim.w,                   //ui_width\n      this.dim.h);                  //ui_height\n\n      this.started = true\n  }\n\n  render() {\n    return (\n      <div id=\"game\" class=\"game-content\">\n      </div>\n    );\n  }\n\n  componentDidRender(){\n\n    setTimeout(()=> {\n      \n      this.start()\n    }, 20)\n  }\n\n  @Method() async pause() {\n    this.pauseDate = Date.now()\n    this.log.pause_count++;\n    console.log('paused')\n\n}\n\n  @Method() async resume(){\n      this.log.pause_time += Date.now()-this.pauseDate\n      console.log('resumed')\n\n  }\n  @Method() async stop(){\n      this.log.interrupt();\n      console.log('stopped')\n  }\n  \n  @Method() async restart(){\n    this.stop();\n    this.start();\n  }\n\n  public calculateScore() {\n\t\tconst displayedpercentages = [];\n\t\tconst realPercentages = [];\n\t\tconst goodValuesPerLevel = [];\n\t\tconst valuesPerLevel = [];\n\t\tconst acceptableValuesPerLevel = [];\n\t\tconst weightsPerLevel = [];\n\n\t\t// calculating scores for every level just in class planar\n\t\t// transforming the level specific scores into percentages\n\t\t// e.g.: 400 displayed score on level 0 is 50% (halfway to the maximum of 600 and the minimum of 200)\n\t\tlet duration = 0;\n    for (let i = 0; i < this.mapManager.maxLevel; i++) {\n\t\t\tconst goodValues = [];\n\t\t\tconst values = [];\n\t\t\tconst acceptableValues = [];\n\t\t\tconst weights = [];\n\t\t\t//number of steps\n\t\t\tgoodValues.push(config[i].nofSteps.good);\n\t\t\tvalues.push(this.specialLog.levels[i].nofSteps);\n\t\t\tacceptableValues.push(config[i].nofSteps.acceptable);\n\t\t\tweights.push(config[i].nofSteps.weight);\n\t\t\t//playTime\n\t\t\tgoodValues.push(config[i].playTime.good);\n\t\t\tvalues.push(this.specialLog.levels[i].playTime / 1000);\n      duration += this.specialLog.levels[i].playTime;\n\t\t\tacceptableValues.push(config[i].playTime.acceptable);\n\t\t\tweights.push(config[i].playTime.weight);\n\t\t\tgoodValuesPerLevel.push(goodValues);\n\t\t\tvaluesPerLevel.push(values);\n\t\t\tacceptableValuesPerLevel.push(acceptableValues);\n\t\t\tweightsPerLevel.push(weights);\n\n\t\t\tconst calculator = new ScoreCalculator(2, i);\n\n\t\t\tconst localDisplayedScore = calculator.getDisplayedScore(goodValues, values, acceptableValues, weights);\n\t\t\tconst localRealScore = calculator.getRealScore(goodValues, values, acceptableValues, weights);\n\t\t\tdisplayedpercentages.push((localDisplayedScore - 200) / (400 + i * 200));\n\t\t\trealPercentages.push((localRealScore) / (600 + i * 200));\n\t\t}\n\n\t\tlet displayedScore = 1000 * (displayedpercentages.reduce((prev, curr) => prev + curr, 0) / this.mapManager.maxLevel);\n\t\tlet realScore = 1000 * (realPercentages.reduce((prev, curr) => prev + curr, 0) / this.mapManager.maxLevel);\n\t\tdisplayedScore = Math.round(displayedScore);\n\t\trealScore = Math.round(realScore);\n\n\t\t\n    this.log.score = realScore;\n    this.sendLog();\n    this.finish.emit({score: realScore, duration: duration})\n\n\t}\n\n  sendLog(){\n    let duration = Date.now()-new Date(this.log.start_time).getTime();\n    this.log.duration = duration;\n    this.log.game_specific_data = JSON.stringify(this.specialLog);\n    this.log.send();\n  }\n\n}\n"]}