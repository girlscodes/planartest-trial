{"version":3,"file":"anim.js","sourceRoot":"","sources":["../anim.ts"],"names":[],"mappings":"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","sourcesContent":["import * as PIXI from \"pixi.js\";\n\nexport class Scheduler {\n    private runningProcesses: Process[];\n    private intervals: Array<{ delay: Process, callback: () => void, context?: any }>;\n\n    constructor() {\n        this.runningProcesses = [];\n        this.intervals = [];\n    }\n\n    public run(process: Process, sprite: PIXI.Container): Promise<PIXI.Container> {\n        process.setTarget(sprite);\n        return new Promise((resolve) => {\n            process.setEndCallback(resolve);\n            process.run();\n        });\n    }\n\n    public pause(): void {\n        for (let process of this.runningProcesses) {\n            process.pause();\n        }\n        for (let interval of this.intervals) {\n            interval.delay.pause();\n        }\n    }\n\n    public resume(): void {\n        for (let process of this.runningProcesses) {\n            process.resume();\n        }\n        for (let interval of this.intervals) {\n            interval.delay.resume();\n        }\n    }\n\n    public stop(): void {\n        this.pause();\n        this.runningProcesses = [];\n    }\n\n    public addRunningProcess(process: Process) {\n        for (let currProc of this.runningProcesses) {\n            if (currProc.id === process.id) return; // don't add the same process twitce (happens in setInterval when paused/resumed few times)\n        }\n        this.runningProcesses.push(process);\n    }\n\n    public removeRunningProcess(process: Process) {\n        for (let i = 0; i < this.runningProcesses.length; i++) {\n            if (this.runningProcesses[i].id == process.id) {\n                this.runningProcesses.splice(i, 1);\n            }\n        }\n    }\n\n    public forceFinish(process: Process) {\n        for (let i = 0; i < this.runningProcesses.length; i++) {\n            if (this.runningProcesses[i].id == process.id) {\n                this.runningProcesses[i].forceFinish();\n                this.runningProcesses.splice(i, 1);\n            }\n        }\n    }\n\n    public setTimeOut(duration: number, callback: () => void, context?: any): Delay {\n        const delay = new Delay();\n        delay.setTarget(new PIXI.Sprite());\n        delay.setEndCallback(callback, context);\n        delay.setDuration(duration);\n        delay.run();\n        return delay;\n    }\n\n    public clearTimeOut(delay: Delay) {\n        delay.stop();\n    }\n\n    public setInterval(duration: number, callback: () => void, context?: any): Process {\n        const delay: Process = new Delay().setDuration(duration);\n        delay.setDuration(duration);\n\n        this.intervals.push({\n            delay,\n            callback,\n            context\n        });\n        delay.setEndCallback(this.nextInterval, this.intervals[this.intervals.length - 1]);\n        delay.setTarget(new PIXI.Sprite());\n        delay.run();\n        return delay;\n    }\n\n    private nextInterval() {\n        (<any>this).callback.call((<any>this).context);\n        if (!(<any>this).delay.isStopped) (<any>this).delay.run();\n    }\n\n    public clearInterval(delay: Process): void {\n        delay.stop();\n        for (let i = 0; i < this.intervals.length; i++) {\n            if (this.intervals[i].delay.id == delay.id) {\n                this.intervals.splice(i, 1);\n            }\n        }\n    }\n}\n\nexport var scheduler: Scheduler = new Scheduler();\n\nlet animPaused: boolean = false;\n//let epsilon: number = 0.001;\n\n\nexport var Types = {\n    Process: \"process\",\n    Delay: \"delay\",\n    Sequence: \"sequence\",\n    Parallel: \"parallel\",\n    FadeTo: \"fadeTo\",\n    MoveTo: \"moveTo\",\n    MoveBy: \"moveBy\",\n    RotateTo: \"rotateTo\",\n    RotateBy: \"rotateBy\",\n    ScaleTo: \"scaleTo\",\n    ScaleBy: \"scaleBy\"\n};\n\nexport class Process {\n    public id: number;\n    protected type: string = Types.Process;\n    protected duration: number = 1000;\n    protected currTime: number = 0;\n    protected target: PIXI.Container | undefined;\n    protected endCallback: ((target: PIXI.Container) => void) | undefined;\n    protected endCallbackContext: any;\n    public isStopped: boolean;\n\n    private prevTimestamp: number = 0;\n\n    private currRequestId: number = 0;\n\n    constructor() {\n        this.id = Math.random() * 10000;\n        this.isStopped = false;\n    }\n\n    /**\n     * @param {number} duration of animation in milliseconds\n     * @returns {bc.Process}\n     */\n    public setDuration(duration: number): Process {\n        this.duration = duration;\n        return this;\n    }\n\n    public setTarget(target: PIXI.Container): void {\n        this.target = target;\n    }\n\n    public setEndCallback(callback: (target: PIXI.Container) => void, callbackContext?: any) {\n        this.endCallback = callback;\n        this.endCallbackContext = callbackContext;\n    }\n\n    public run(): void {\n        if (!this.target) {\n            console.warn(\"Anim \" + this.type + \" target not specified\");\n            return;\n        }\n        this.isStopped = false;\n        this.currTime = 0;\n        this.prevTimestamp = performance.now();\n        scheduler.addRunningProcess(this);\n        if (!animPaused) this.currRequestId = requestAnimationFrame(this.requestAnimCallback);\n    };\n\n    protected requestAnimCallback = () => {\n        const currTime = performance.now();\n        let delta = currTime - this.prevTimestamp;\n        if (this.currTime + delta >= this.duration) {\n            delta = this.duration - this.currTime;\n        } else {\n            this.currRequestId = requestAnimationFrame(this.requestAnimCallback);\n        }\n        this.currTime += delta;\n        this.prevTimestamp = currTime;\n        this.update(delta);\n        if (this.currTime == this.duration) {\n            if (this.endCallback) this.endCallback.call(this.endCallbackContext, this.target!);\n            scheduler.removeRunningProcess(this);\n            this.isStopped = true;\n        }\n    }\n\n    public pause() {\n        cancelAnimationFrame(this.currRequestId);\n    }\n\n    public resume() {\n        this.prevTimestamp = performance.now();\n        this.currRequestId = requestAnimationFrame(this.requestAnimCallback);\n    }\n\n    public stop() {\n        this.isStopped = true;\n        cancelAnimationFrame(this.currRequestId);\n        scheduler.removeRunningProcess(this);\n    }\n\n    public forceFinish() {\n        cancelAnimationFrame(this.currRequestId);\n        this.update(this.duration - this.currTime);\n        if (this.endCallback) this.endCallback.call(this.endCallbackContext, this.target!);\n        scheduler.removeRunningProcess(this);\n        this.isStopped = true;\n    }\n\n    protected update(delta: number) {\n        delta;\n    }\n}\n\nexport class Delay extends Process {\n    constructor() {\n        super();\n        this.type = Types.Delay;\n    }\n}\n\nexport class Sequence extends Process {\n    private subProcesses: Process[] = [];\n    private currentRunningIndex: number = 0;\n\n    constructor(processes: Process[]) {\n        super();\n        this.type = Types.Sequence;\n        this.subProcesses = processes;\n    }\n\n    public override run(): void {\n        this.currentRunningIndex = 0;\n        this.next();\n    }\n\n    private increaseCounter = () => {\n        this.currentRunningIndex++;\n        this.next();\n    }\n\n    private next(): void {\n        const currProcess = this.subProcesses[this.currentRunningIndex];\n        if (currProcess) {\n            currProcess.setTarget(this.target!);\n            currProcess.setEndCallback(this.increaseCounter);\n            currProcess.run();\n        } else if (this.endCallback) {\n            this.endCallback.call(this.endCallbackContext, this.target!);\n        }\n    }\n}\n\nexport class Parallel extends Process {\n    private subProcesses: Process[] = [];\n    private endedProcesses: number = 0;\n\n    constructor(processes: Process[]) {\n        super();\n        this.type = Types.Parallel;\n        this.subProcesses = processes;\n    }\n\n    public override run(): void {\n        for (let process of this.subProcesses) {\n            process.setTarget(this.target!);\n            process.setEndCallback(this.checkEnd);\n            process.run();\n        }\n    }\n\n    private checkEnd = () => {\n        this.endedProcesses++;\n        if (this.endedProcesses === this.subProcesses.length && this.endCallback) {\n            this.endCallback.call(this.endCallbackContext, this.target!);\n        }\n    }\n}\n\nexport class FadeTo extends Process {\n    private to: number;\n    private fadeDiffPerMilliSec: number = 0;\n\n    constructor(to: number) {\n        super();\n        this.type = Types.FadeTo;\n        this.to = to;\n    }\n\n    public override run(): void {\n        super.run();\n        this.fadeDiffPerMilliSec = (this.to - this.target!.alpha) / this.duration;\n    }\n\n    protected override update(delta: number) {\n        this.target!.alpha += delta * this.fadeDiffPerMilliSec;\n    }\n}\n\nexport class MoveTo extends Process {\n    private to: PIXI.Point;\n    private dir: PIXI.Point | undefined;\n\n    constructor(to: PIXI.Point) {\n        super();\n        this.to = new PIXI.Point(to.x, to.y);\n    }\n\n    public override run(): void {\n        super.run();\n        this.dir = new PIXI.Point(\n            (this.to.x - this.target!.x) / this.duration,\n            (this.to.y - this.target!.y) / this.duration\n        )\n    }\n\n    protected override update(delta: number) {\n        this.target!.x += this.dir!.x * delta;\n        this.target!.y += this.dir!.y * delta;\n    }\n}\n\nexport class MoveBy extends Process {\n    private dir: PIXI.Point | undefined;\n    private by: PIXI.Point;\n\n    constructor(by: PIXI.Point) {\n        super();\n        this.by = new PIXI.Point(by.x, by.y);\n    }\n\n    public override run(): void {\n        super.run();\n        this.dir = new PIXI.Point(this.by.x / this.duration, this.by.y / this.duration);\n    }\n\n    protected override update(delta: number) {\n        this.target!.x += this.dir!.x * delta;\n        this.target!.y += this.dir!.y * delta;\n    }\n}\n\nexport class ScaleTo extends Process {\n    private to: PIXI.Point;\n    private amount: PIXI.Point;\n\n    constructor(x: number, y?: number) {\n        super();\n        this.to = new PIXI.Point();\n        this.to.set(x, y ? y : x);\n        this.amount = new PIXI.Point();\n    }\n\n    public override run(): void {\n        super.run();\n        this.amount.set(\n            (this.to.x - this.target!.scale.x) / this.duration,\n            (this.to.y - this.target!.scale.y) / this.duration,\n        );\n    }\n\n    protected override update(delta: number) {\n        this.target!.scale.x += this.amount.x * delta;\n        this.target!.scale.y += this.amount.y * delta;\n    }\n}\n\nexport class ScaleBy extends Process {\n    private amount: PIXI.Point;\n    private by: PIXI.Point;\n\n    constructor(by: PIXI.Point) {\n        super();\n        this.by = new PIXI.Point(by.x, by.y);\n        this.amount = new PIXI.Point();\n    }\n\n    public override run(): void {\n        super.run();\n        this.amount.set(this.by.x / this.duration, this.by.y / this.duration);\n    }\n\n    protected override update(delta: number) {\n        this.target!.scale.x += this.amount.x * delta;\n        this.target!.scale.y += this.amount.y * delta;\n    }\n}\n\nexport class RotateTo extends Process {\n    private to: number;\n    private amount: number = 0;\n\n    constructor(angle: number) {\n        super();\n        this.to = angle;\n    }\n\n    public override run(): void {\n        super.run();\n        this.amount = (this.to - this.target!.rotation) / this.duration;\n    }\n\n    protected override update(delta: number) {\n        this.target!.rotation += this.amount * delta;\n    }\n}\n\nexport class RotateBy extends Process {\n    private amount: number = 0;\n    private by: number;\n\n    constructor(angle: number) {\n        super();\n        this.by = angle;\n    }\n\n    public override run(): void {\n        super.run();\n        this.amount = this.by / this.duration;\n    }\n\n    protected override update(delta: number) {\n        this.target!.rotation += this.amount * delta;\n    }\n}\n"]}